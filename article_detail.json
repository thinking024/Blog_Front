{
    "code": 100,
    "msg": "success",
    "data": [
        {
            "articleId": 32,
            "articleTitle": "Docker_入门？只要这篇就够了！（纯干货适合0基础小白）",
            "articleContent": "<p>原文地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://blog.csdn.net/S_gy_Zetrov/article/details/78161154\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/S_gy_Zetrov/article/details/78161154</a></p><h2 id=\"写在前面\">写在前面</h2><ul><li>这篇博客适合谁？<ul><li>对于Docker并不了解，只是有一点模糊的感觉，觉得Docker可以当成虚拟机用之类的</li><li>只是下载了Docker软件，对于怎么配置，怎么玩，第一步干什么，完全一无所知</li><li>本文适用于mac，PC用户不保证文章的效果，现在离开来得及</li></ul></li><li>网上Docker相关的教程都泛滥了，为啥还要写，为啥我要看你的文章<ul><li>首先欢迎你，能搜索到我的博客就是缘分</li><li>其次，确实，现在Docker相关的文章真的太多了，那我为什么还要写呢？原因有三：<ul><li>其一，文章是很多，各种1小时入门什么的，相信你已经在知乎看过很多了，我也看过，<br>因为我就是从知乎那几篇教程为起点，自己抠出来的，现在把自己的心得和经验贴出来，我觉得既是对自己负责也能服务他人。</li><li>其二，我从对Docker只有及其模糊（真的是模糊，我除了知道Docker是跟虚拟系统有关其他啥都不知道），到现在起码一<br>问一不知（对应一问三不知）的状态，大概花了8个小时。这期间全靠我从网络上搜索到的资料。现在用我的话写出来，我觉得对于跟我相同开始情况的小白用户，能省不少时间，所以我要写。</li><li>其三，因为我自己是纯靠搜索到的教程和技术文章学习的Docker，我自然是懂得干涩的语言对学习的拖慢。所以我自己写的时候，自然会考虑到这个问题。本文尽量不用技术用语，尽量使用通俗易懂的文字，为进一步拉低Docker的入门门槛作出我自己的贡献。</li></ul></li></ul></li><li>这篇文章主要是哪方面的Docker文章，纯入门？你做了哪些工作？<ul><li>很高兴你问了我这个问题。本文主要：<ul><li>首先对于Docker的概念作出我的解释，尽量通俗易懂</li><li>接着针对我用Docker的目的，从最开始的软件下载，到最后push一个自己的镜像到hub，整个过程以白话的形式描述出来，降低入门门槛，节省你的学习时间</li></ul></li><li>我做了哪些工作？这是个好问题！<ul><li>首先，我一直都很好奇Docker这个东西，但从来没有机会去使用它。但是，这学期OS课的lab，纯Linux系统编程，虽然使用双系统或者虚拟机都是纯小学生的难易程度了，也不麻烦，但我想，为什么不用Docker呢？用双系统或者虚拟机也太过小儿科！所以，我就这样接触了Docker</li><li>那么我使用Docker实现了什么？在lab中，我们需要用到的是纯终端下的gcc工具链还有vim等，那么这就是我需要的全部软件了！于是我在Docker中实现了「gcc+gdb<br>+vim」环境，并push到了hub中。</li></ul></li></ul></li><li>你这篇博客有没有抄别人的？<ul><li>额，我学习Docker时确实看了很多很多（真的是很多）文章，现在写这篇博客，除了自己的经验心得，自然还得去看那些文章。但我能保证的是，我写的都是取精华去糟粕，不然这篇文章就不必存在了你说是不是？</li><li>参考资料会在文后统一附上，谢谢！</li></ul></li></ul><p>好了，闲话说完，我们开始吧！</p><p>&nbsp;</p><h2 id=\"入门docker你要下载什么注册什么\">入门Docker，你要下载什么？注册什么？</h2><p id=\"dockerapp你肯定是要下载的\"><strong><span>+ Docker.app你肯定是要下载的！</span></strong></p><p>Docker for mac，这个你肯定要下载：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://www.docker.com/community-edition\" target=\"_blank\" rel=\"noopener noreferrer\">点我下载Docker for mac的社区免费版本</a></p><p>&nbsp;</p><p id=\"注册docker官方账号你需要它\"><strong><span>+ 注册Docker官方账号，你需要它！</span></strong></p><p>注册一个Docker的官方账号，有利而无害，相信我！<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://cloud.docker.com/swarm/sgyzetrov/dashboard/onboarding/cloud-registry\" target=\"_blank\" rel=\"noopener noreferrer\">点我注册Docker Cloud官方账号</a></p><p>Docker安装好，账号也注册后，点击桌面顶栏的Docker图标，点击sign in，登陆你的Docker账号。</p><p>&nbsp;</p><h2 id=\"注册daocloud账号获取加速服务\"><span>+ 注册DaoCloud账号，获取加速服务！</span></h2><p>不可否认，有时直接从Docker官方往本地pull镜像会十分缓慢。。。这时我们可以通过国内的Docker服务提供商免费获取加速pull镜像服务，阿里网易好像都有这种服务，我选择的是DaoCloud：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://account.daocloud.io/signup\" target=\"_blank\" rel=\"noopener noreferrer\">点我注册DaoCloud账号</a></p><p>注册后登陆DaoCloud，找到这个按钮：</p><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005113053850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU19neV9aZXRyb3Y=/font/5a6L5L2T/fontsize/1400/fill/I0ZGMDAwMA==/dissolve/90/gravity/Center\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker1.png\"></p><p>接着，按照它的步骤，为自己添加Docker加速服务</p><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005113639144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU19neV9aZXRyb3Y=/font/5a6L5L2T/fontsize/1400/fill/I0ZGMDAwMA==/dissolve/70/gravity/Center\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker2\"></p><h4></h4><p id=\"到此准备工作结束进入下一部分\"><strong><span>+ 到此准备工作结束，进入下一部分！</span></strong></p><p>&nbsp;</p><h2 id=\"要想入门docker首先你需要理解docker\">要想入门Docker，首先你需要理解Docker！</h2><p>我也不扯淡了，直接上我对Docker的理解：(Copyright ©&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/s_gy_zetrov\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.csdn.net/s_gy_zetrov</a>. All Rights Reserved)</p><p>Docker，可以说是一个终端命令行的虚拟机，但更准确的说法，其实应该是一个虚拟环境。比如，你想要在PC上无缝使用Linux么？那么虚拟机并不是你唯一的出路，你还有Docker！我更愿意称Docker为一个容器，当然这只是Docker的一个狭义解释，Docker不止是一个容器。Docker包含3个重要概念：</p><ul><li>一个，是镜像（Image），镜像是静态的、可以被用户互相分享的文件。我们玩过双系统和虚拟机的人都知道，首先你需要一个.iso镜像，才能安装系统。Docker中的镜像也是这个东西，<strong><span>镜像是静态的，你不能对他操作，只能pull别人的镜像或者push自己的镜像</span></strong>。</li><li>还有一个，是容器（Container），前面说过，镜像是静态不可操作的，只能被分享和下载，那什么是能被操作的呢？就是容器里！容器可以理解为镜像的动态状态，也就是我们虚拟机中系统装好后的状态，其实这么说是不对的，容器最符合的描述应该是Linux的iso文件的<code>Live CD</code>模式，比如我们玩双系统时都进入过<code>Live CD</code>模式，不安装系统而直接进入系统，很神奇是吧，Docker的容器就是这个概念，只不过更加轻量更加迅速便捷。但是<code>Live CD</code>的害处就是你关机后作出的修改安装的软件全部gg，<strong><span>容器也是一样，一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在</span></strong>。</li><li>最后，是仓库（Repository）。各位在前面看到我写的pull和push什么的，有没有晕？不知道各位对于git熟悉不熟悉，Docker中的仓库很像git的代码仓库，你可以pull自己之前push到自己仓库的镜像到本地，也可以pull别人push到公共仓库的镜像到自己本地。说白了就是百度云盘，你可以上传（push）自己做好环境的Docker上去，也可以下载（pull）自己云端的镜像到本地。同时，我们知道百度云最大的特点就是分享（你懂的嘿嘿嘿），类比Docker，如果你得到百度云分享链接（别人的镜像名字、标签和别人的用户名），你还可以下载（pull）别人分享的镜像到自己的本地，别人也可以下载（pull）你的镜像，因为Docker仓库都是公共的。当然，每个免费用户有一个名额把自己的一个镜像设为私有，也就是禁止被分享给别人，类比百度云上你自己保存的而没有被生成分享链接的小姐姐。</li></ul><p>接下来来张高大上的概念图，各位看个热闹2333</p><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005120538429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU19neV9aZXRyb3Y=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker3.png\"></p><h3 id=\"接下来就是实战了打开你的iterm2我是iterm2党2333打开普通terminal也行这个不影响\">接下来就是实战了！打开你的iTerm2！（我是iTerm2党2333，打开普通terminal也行，这个不影响）</h3><p>&nbsp;</p><p id=\"查看docker版本信息\"><strong><span>+ 查看Docker版本信息</span></strong></p><pre class=\"prettyprint\"><code class=\"hljs livecodeserver has-numbering\">终端输入：\r\n<strong><span>docker <span class=\"hljs-built_in\">version</span></span></strong></code></pre><p>&nbsp;</p><p>显示的我的版本信息</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\"> ~$ docker version\r\nClient:\r\n Version:      <span class=\"hljs-number\">17.06</span><span class=\"hljs-number\">.2</span>-ce\r\n API version:  <span class=\"hljs-number\">1.30</span>\r\n Go version:   go1.8.3\r\n Git commit:   cec0b72\r\n Built:        Tue Sep  <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">06</span> <span class=\"hljs-number\">2017</span>\r\n OS/Arch:      darwin/amd64\r\n <span class=\"hljs-keyword\">...</span>\r\n //omitted by sgy(Copyright © http://blog.csdn.net/s_gy_zetrov. All Rights Reserved)\r\n <span class=\"hljs-keyword\">...</span></code></pre><p>不过我一般不需要那么多信息，所以一直用的是<code>docker -v</code>命令</p><h4></h4><p id=\"是时候pull你的第一个镜像下来的\"><strong><span>+ 是时候pull你的第一个镜像下来的！</span></strong></p><p>Docker安装好后是不会自带镜像的，你需要从仓库自己pull一个镜像下来，自己制作自己的镜像也是一个道理，你可以通过在已有的镜像基础上生成自己的镜像或者看一下这篇博客:&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/shiqiangdexin/article/details/52472195\" target=\"_blank\" rel=\"noopener noreferrer\">随便百度的如何创建自己Docker镜像得到的教程</a></p><p>Docker镜像官方好像只提供Linux，这个很容易想，windows和mac是要交钱的吧大概？（否）</p><p>搜索ubuntu的Docker镜像<strong><span><code>docker search ubuntu</code></span></strong>，这个如果你想要什么centos，直接改就行，不区分写法,我的返回结果：</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\">~$ docker search ubuntu\r\nNAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\r\nubuntu                                                 Ubuntu is a Debian-based Linux operating s...   <span class=\"hljs-number\">6636</span>                [OK]\r\ndorowu/ubuntu-desktop-lxde-vnc                         Ubuntu with openssh-server and NoVNC            <span class=\"hljs-number\">131</span>                                     [OK]\r\nrastasheep/ubuntu-sshd                                 Dockerized SSH service, built on top of of...   <span class=\"hljs-number\">105</span>                                     [OK]\r\nansible/ubuntu14.04-ansible                            Ubuntu <span class=\"hljs-number\">14.04</span> LTS with ansible                   <span class=\"hljs-number\">86</span>                                      [OK]\r\nubuntu-upstart                                         Upstart is an event-based replacement <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">...</span>   <span class=\"hljs-number\">80</span>                  [OK]\r\nneurodebian                                            NeuroDebian provides neuroscience research...   <span class=\"hljs-number\">40</span>                  [OK]\r\nubuntu-debootstrap                                     debootstrap --variant=minbase --components...   <span class=\"hljs-number\">31</span>                  [OK]\r\n<span class=\"hljs-keyword\">...</span>\r\n//omitted by sgy(Copyright © http://blog.csdn.net/s_gy_zetrov. All Rights Reserved)\r\n<span class=\"hljs-keyword\">...</span></code></pre><p>&nbsp;</p><p>拉取官方最新版的ubuntu镜像：<strong><span><code>docker pull ubuntu:latest</code></span></strong>，其中的latest是一个标签（tag），表示是当前最新版本。你应该得到的信息，类似这样的</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\">～$ docker pull ubuntu:latest\r\nTrying to pull repository docker.io/<span class=\"hljs-keyword\">library</span>/ubuntu <span class=\"hljs-keyword\">...</span> \r\nlatest: Pulling from docker.io/<span class=\"hljs-keyword\">library</span>/ubuntu\r\naed158d74952: Pull complete \r\n773ae8273d14: Pull complete \r\nd1d487w88782: Pull complete \r\ncd3d6cd6c0cf: Pull complete \r\n8d73bu79120c: Pull complete \r\nDigest: sha256:35bc48a1ca97c3f74rhf378hj92hd82j29i4hf4hf84nf0dhnsid232de8d8\r\nStatus: Downloaded newer image <span class=\"hljs-keyword\">for</span> docker.io/ubuntu:latest</code></pre><p><strong><span>你输入的命令实际上相当于<code>docker pull registry.hub.docker.com/ubuntu:latest</code>命令，即从注册服务器<code>registry.hub.docker.com</code>中的名为<code>ubuntu</code>的仓库中下载标签为<code>latest</code>的镜像</span></strong>。</p><p>&nbsp;</p><p>由于我的lab统一要求，ubuntu需要14.04版本，所以我在hub里面搜了搜，<strong><span>找到了一个用户分享的14.04 64位纯净镜像（base image）</span></strong>，下面将他的镜像扒下来</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span>docker pull chug/ubuntu14.<span class=\"hljs-number\">04</span>x64</code></pre><p>这个用户还有很多其他版本的ubuntu系统，12 13 14的32位64位都有，全是纯净镜像。</p><h4></h4><p id=\"查看你本地的镜像仓库\"><strong><span>+ 查看你本地的镜像仓库！</span></strong></p><p>把初始镜像拉下来后，就可以启动它了，不过，可以先使用<code>docker images</code>命令查看你自己的本地镜像，我随便找了个例子，你的也应该是类似这样的：</p><pre class=\"prettyprint\"><code class=\"hljs lua has-numbering\">～$ <span><strong>docker images</strong></span>\r\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\r\ndocker.<span class=\"hljs-built_in\">io</span>/ubuntu    <span class=\"hljs-number\">16.04</span>               e4415b714b62        <span class=\"hljs-number\">11</span> days ago         <span class=\"hljs-number\">128.1</span> MB\r\ndocker.<span class=\"hljs-built_in\">io</span>/ubuntu    latest              e4415b714b62        <span class=\"hljs-number\">11</span> days ago         <span class=\"hljs-number\">128.1</span> MB\r\ndocker.<span class=\"hljs-built_in\">io</span>/ubuntu    <span class=\"hljs-number\">12.04</span>               aefa163f7a7e        <span class=\"hljs-number\">11</span> days ago         <span class=\"hljs-number\">103.5</span> MB\r\ndocker.<span class=\"hljs-built_in\">io</span>/centos    latest              <span class=\"hljs-number\">0584</span>b3d2cf6d        <span class=\"hljs-number\">3</span> weeks ago         <span class=\"hljs-number\">196.5</span> MB</code></pre><p>&nbsp;</p><p>从网上一个教程中找到以下说法，比我说的好，那就看这个吧！</p><blockquote><p>在列出信息中，可以看到几个字段信息:</p><ul><li>来自于哪个仓库，比如 ubuntu</li><li>镜像的标记，比如 16.04</li><li>它的 ID 号(唯一)，比如e4415b714b62</li><li>创建时间</li><li>镜像大小</li></ul><p>其中镜像的 ID 唯一标识了镜像，注意到 ubuntu:16.04 和 ubuntu:latest具有相同的镜像 ID ，说明它们实际上是同一镜像。 TAG 信息用来标记来自同一个仓库的不同镜像。例如 ubuntu 仓库中有多个镜像，通过 TAG 信息来区分发行版本，例如10.04 、 12.04 、 12.10 、 13.04 、 14.04 等。例如可以使用<code>docker run -t -i ubuntu:16.04 /bin/bash</code>命令指定使用镜像<code>ubuntu:16.04</code>来启动一个容器。如果不指定具体的标记，则默认使用<code>latest</code>标记信息。</p></blockquote><h4></h4><p id=\"启动你的镜像并尽情安装软件吧\"><strong><span>+ 启动你的镜像并尽情安装软件吧！</span></strong></p><p>以下内容均以我自己pull下来的chug的初始镜像为例：</p><p>现在你已经有一个初始的镜像了，注意这个里面是什么都没有的，连vim都没装，是精简到不能再精简的镜像了。</p><p>首先启动它：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">～<span class=\"hljs-variable\">$ </span>docker run -it chug/ubuntu14.<span class=\"hljs-number\">04</span>x64 /bin/bash\r\nroot<span class=\"hljs-variable\">@aa97ba3292ce</span><span class=\"hljs-symbol\">:/</span><span class=\"hljs-comment\">#</span></code></pre><p><strong><span>-it 表示运行在交互模式，是-i -t的缩写，即-it是两个参数：-i和-t。前者表示打开并保持stdout，后者表示分配一个终端（pseudo-tty）一般这个模式就是可以启动bash，然后和容器有命令行的交互</span></strong></p><p>可以看到我们终端的字头变成<code>root@aa97ba3292ce:/#</code>了，这就意味着我们的镜像已经创建了一个容器实例。现在我们可以对这个“ubuntu系统”进行操作了</p><p>&nbsp;</p><p>比如安装vim：</p><pre class=\"prettyprint\"><code class=\"hljs applescript has-numbering\">root@aa97ba3292ce:/<span class=\"hljs-comment\"># <strong><span>apt-get install vim</span></strong></span>\r\nReading package lists... Done\r\nBuilding dependency tree... Done\r\nThe following extra packages will be installed:\r\n  <span class=\"hljs-type\">file</span> libexpat1 libffi6 libgpm2 libmagic1 libpython2<span class=\"hljs-number\">.7</span> libpython2<span class=\"hljs-number\">.7</span>-minimal libpython2<span class=\"hljs-number\">.7</span>-stdlib libsqlite3-<span class=\"hljs-number\">0</span> libssl1<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> mime-support vim-common vim-runtime\r\nSuggested packages:\r\n  gpm ctags vim-doc vim-scripts\r\nThe following NEW packages will be installed:\r\n  <span class=\"hljs-type\">file</span> libexpat1 libffi6 libgpm2 libmagic1 libpython2<span class=\"hljs-number\">.7</span> libpython2<span class=\"hljs-number\">.7</span>-minimal libpython2<span class=\"hljs-number\">.7</span>-stdlib libsqlite3-<span class=\"hljs-number\">0</span> libssl1<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> mime-support vim vim-common vim-runtime\r\n<span class=\"hljs-number\">0</span> upgraded, <span class=\"hljs-number\">14</span> newly installed, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> remove <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">not</span> upgraded.\r\nNeed <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-number\">10.7</span> MB <span class=\"hljs-keyword\">of</span> archives.\r\nAfter this operation, <span class=\"hljs-number\">50.7</span> MB <span class=\"hljs-keyword\">of</span> additional disk <span class=\"hljs-constant\">space</span> will be used.\r\nDo you want <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">continue</span>? [Y/n]</code></pre><p>看到我没有用sudo，是因为本来就已经是超级用户（root）状态了。</p><p>同理按照我自己的需求，我安装了gcc和gdb</p><h4></h4><p id=\"想退出容器很简单\"><span><strong>+ 想退出容器？很简单！</strong></span></p><p>如果使用exit，命令退出，则容器的状态处于Exit，而不是后台运行。如果想让容器一直运行，而不是停止，可以使用快捷键&nbsp;<strong><span>ctrl+p ctrl+q</span></strong>&nbsp;退出，此时容器的状态为Up。</p><p>查看当前正在运行的容器：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker ps</span></strong>\r\n<span class=\"hljs-constant\">CONTAINER</span> <span class=\"hljs-constant\">ID</span>        <span class=\"hljs-constant\">IMAGE</span>                 <span class=\"hljs-constant\">COMMAND</span>             <span class=\"hljs-constant\">CREATED</span>             <span class=\"hljs-constant\">STATUS</span>              <span class=\"hljs-constant\">PORTS</span>               <span class=\"hljs-constant\">NAMES</span>\r\naa97ba3292ce        chug/ubuntu14.<span class=\"hljs-number\">04</span>x64   <span class=\"hljs-string\">\"/bin/bash\"</span>         <span class=\"hljs-number\">7</span> minutes ago       <span class=\"hljs-constant\">Up</span> <span class=\"hljs-number\">7</span> minutes                           relaxed_hoover</code></pre><p>&nbsp;</p><p>看到当前有一个ID为aa97ba3292ce的容器(Copyright ©&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/s_gy_zetrov\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.csdn.net/s_gy_zetrov</a>. All Rights Reserved)</p><p>启动、停止、重启容器aa97ba3292ce的命令：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker start aa97ba3292ce</span></strong>\r\n~<span class=\"hljs-variable\">$ </span><span><strong>docker stop aa97ba3292ce</strong></span>\r\n~<span class=\"hljs-variable\">$ </span><span><strong>docker restart aa97ba3292ce</strong></span></code></pre><p>&nbsp;</p><p><strong><span>后台启动一个容器后，如果想进入到这个容器，可以使用attach命令</span></strong>：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker attach aa97ba3292ce</span></strong></code></pre><h4></h4><h4></h4><p id=\"软件装完想保存环境commit帮你\"><span><strong>+ 软件装完，想保存环境？commit帮你！</strong></span></p><p>将容器转化为一个镜像，即执行commit操作，完成后可使用<strong><span><code>docker images</code></span></strong>查看</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">root<span class=\"hljs-variable\">@aa97ba3292ce</span><span class=\"hljs-symbol\">:/</span><span class=\"hljs-comment\">#exit //先退出容器</span>\r\n~<span class=\"hljs-variable\">$ </span><strong><span>docker commit -m <span class=\"hljs-string\">\"ubuntu with vim\"</span> -a <span class=\"hljs-string\">\"sgy\"</span> aa97ba3292ce sgy/<span class=\"hljs-symbol\">ubuntu:</span>vim</span></strong>\r\n~<span class=\"hljs-variable\">$ </span>docker images\r\n<span class=\"hljs-constant\">REPOSITORY</span>                    <span class=\"hljs-constant\">TAG</span>    <span class=\"hljs-constant\">IMAGE</span> <span class=\"hljs-constant\">ID</span>         <span class=\"hljs-constant\">CREATED</span>             <span class=\"hljs-constant\">SIZE</span>\r\nsgy/ubuntu                    vim    <span class=\"hljs-number\">52166</span>e4475ed     <span class=\"hljs-number\">5</span> seconds ago       <span class=\"hljs-number\">358.1</span> <span class=\"hljs-constant\">MB</span>\r\nchug/ubuntu14.<span class=\"hljs-number\">04</span>x64           latest <span class=\"hljs-number\">05</span>84b3d2cf6d     <span class=\"hljs-number\">9</span> days ago          <span class=\"hljs-number\">196.5</span> <span class=\"hljs-constant\">MB</span></code></pre><p>&nbsp;</p><p>其中，-m指定说明信息；-a指定用户信息；aa97ba3292ce代表容器的id；sgy/ubuntu:vim指定目标镜像的用户名、仓库名和 tag 信息。我这里都是为了博客瞎编的用户名，我自己的用户名也不是sgy，你运行命令的时候使用自己注册Docker时的用户名。</p><p>此时Docker中就有了我们新建的镜像sgy/ubuntu:vim，此镜像和原有的ubuntu镜像区别在于多了个vim工具。此时我们利用新镜像创建的容器，本身就自带vim了。</p><p>启动新创建的镜像，可以看到vim已经自带了。</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\">~$ <strong><span>docker run -it sgy/ubuntu:vim /bin/bash</span></strong>\r\nroot@520afc596c51:/<span class=\"hljs-comment\"># vim --version</span>\r\nVIM - Vi IMproved <span class=\"hljs-number\">7.4</span> (<span class=\"hljs-number\">2013</span> Aug <span class=\"hljs-number\">10</span>, compiled Apr  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2017</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">54</span>)\r\n<span class=\"hljs-keyword\">...</span>\r\n//omitted by sgy(Copyright © http://blog.csdn.net/s_gy_zetrov. All Rights Reserved)\r\n<span class=\"hljs-keyword\">...</span></code></pre><p>利用exit退出容器。此时Docker引擎中就有了两个容器，可使用<code>docker ps -a</code>查看。</p><h4></h4><h4>+ 想要删除容器或者镜像？用这个！</h4><p>如果想删除容器或者镜像，可以使用rm命令，注意：<span><strong>删除镜像前必须先删除以此镜像为基础的容器（哪怕是已经停止的容器），否则无法删除该镜像，会报错<code>Failed to remove image (e4415b714b62): Error response from daemon: conflict: unable to delete e4415b714b62 (cannot be forced) - image has dependent child images</code>类似这种</strong></span>。</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker rm container_id</span></strong>\r\n~<span class=\"hljs-variable\">$ </span><span><strong>docker rmi image_id</strong></span></code></pre><p>&nbsp;</p><p>有的时候尽管删除了全部容器，镜像还是无法删除，这时点击mac顶栏中的docker logo，选择restart，然后再试一次rmi，应该就没问题了。(Copyright ©&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/s_gy_zetrov\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.csdn.net/s_gy_zetrov</a>. All Rights Reserved)</p><h4 id=\"附上一张高大上的docker命令图\">+ 附上一张高大上的Docker命令图</h4><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005132826220\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker4.png\"></p><h4></h4><p id=\"一次配置到处使用那就push到hub上吧\"><span><strong>+ 一次配置，到处使用？那就push到hub上吧！</strong></span></p><p>因为之前已经在Docker.app中登陆了Docker账号，所以现在直接</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker push sgy/<span class=\"hljs-symbol\">ubuntu:</span>vim</span></strong></code></pre><p>就可以了！</p><p>下次到了机房，在ubuntu系统中安装Docker，配置好加速器，启动Docker，<strong><span><code>docker login</code></span></strong>登陆自己的账号，然后直接<code>~$&nbsp;<span><strong>docker pull sgy/ubuntu:vim</strong></span></code>就可以把你push到hub的已经配置好的环境的镜像给扒下来。做完实验，再push上去就ok了！</p><h2></h2><h2>Docker中安装gcc、gdb时遇到的问题</h2><p id=\"add-apt-repository-command-not-found\"><span><strong>+ add-apt-repository: command not found</strong></span></p><p>14.04系统解决办法：</p><pre class=\"prettyprint\"><code class=\"hljs lasso has-numbering\">apt<span class=\"hljs-attribute\">-get</span> install software<span class=\"hljs-attribute\">-properties</span><span class=\"hljs-attribute\">-common</span></code></pre><p>&nbsp;</p><p>older版本的系统：</p><pre class=\"prettyprint\"><code class=\"hljs lasso has-numbering\">apt<span class=\"hljs-attribute\">-get</span> install python<span class=\"hljs-attribute\">-software</span><span class=\"hljs-attribute\">-properties</span></code></pre><h4></h4><p id=\"docker中使用gdb无法进入断点无法调试\"><strong><span>+ Docker中使用gdb无法进入断点，无法调试</span></strong></p><p>加上<code>--privileged</code>参数</p><pre class=\"prettyprint\"><code class=\"hljs applescript has-numbering\">～$ docker <span class=\"hljs-command\">run</span> -<span class=\"hljs-keyword\">it</span> <span class=\"hljs-comment\">--privileged sgy/ubuntu:vim /bin/bash</span></code></pre>",
            "articleStatus": 1,
            "articleCreateTime": "2018-11-26",
            "articleUpdateTime": "2019-04-26",
            "articleViewCount": 14,
            "articleSummary": "原文地址：https://blog.csdn.net/S_gy_Zetrov/article/details/78161154写在前面这篇博客适合谁？对于Docker并不了解，只是有一点模糊的感觉，觉得Docker可以当成虚拟机用之类的只是下载了Docker软件，对于怎么配置，怎么玩，第一步干什么，",
            "articlePicUrl": "./assets/img/avatar/avatar1.jpg",
            "categoryList": [
                {
                    "categoryId": 15,
                    "categoryPid": 0,
                    "categoryName": "其他技术",
                    "categoryOrder": null,
                    "articleCount": null
                }
            ]
        },
        null,
        {
            "articleId": 31,
            "articleTitle": null,
            "articleContent": null,
            "articleStatus": null,
            "articleCreateTime": null,
            "articleUpdateTime": null,
            "articleViewCount": null,
            "articleSummary": null,
            "articlePicUrl": null,
            "categoryList": null
        }
    ]
}